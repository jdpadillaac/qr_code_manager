

package com.example.qr_code_manager
// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
import android.app.Activity
import android.content.Context
import android.hardware.fingerprint.FingerprintManager
import android.os.Build
import android.widget.Toast
import androidx.biometric.BiometricManager
import androidx.biometric.BiometricPrompt
import androidx.biometric.BiometricPrompt.PromptInfo
import androidx.core.content.ContextCompat
import androidx.fragment.app.FragmentActivity
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData


class AppBiometricAuthApi(private val context: Context, private val activity: Activity) :
    AuthNaviteApi {
    override fun aunthenticate(): Boolean {
        val  biometricAuth = BiometricAuth(context, activity as FragmentActivity)
        val result = biometricAuth.authenticate()
        if (result.value is Boolean) {
           return result.value as Boolean
        }

        return false
    }

}


class BiometricAuth(private val context: Context, private val activity: FragmentActivity ) {

    private val authenticationResult = MutableLiveData<Boolean>()

    fun authenticate(): LiveData<Boolean> {

        val biometricPrompt: BiometricPrompt = BiometricPrompt(activity,
            ContextCompat.getMainExecutor(activity),
            object : BiometricPrompt.AuthenticationCallback() {
                override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {
                    super.onAuthenticationSucceeded(result)
                    authenticationResult.value = true
                }

                override fun onAuthenticationFailed() {
                    super.onAuthenticationFailed()
                    authenticationResult.value = false
                }

                override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {
                    super.onAuthenticationError(errorCode, errString)
                    authenticationResult.value = false
                }
            })

        val promptInfo = PromptInfo.Builder()
            .setTitle("Autenticación Biométrica")
            .setSubtitle("Use su huella dactilar para autenticarse")
            .setNegativeButtonText("Cancelar")
            .build()

        biometricPrompt.authenticate(promptInfo)

        return authenticationResult
    }

    fun checkBiometricAvailability() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            val biometricManager = BiometricManager.from(
                context
            )

            val canAuthenticate = biometricManager.canAuthenticate()

            when (canAuthenticate) {
                BiometricManager.BIOMETRIC_SUCCESS -> Toast.makeText(
                    context, "Biometría disponible", Toast.LENGTH_SHORT
                ).show()

                BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE -> Toast.makeText(
                    context, "Este dispositivo no tiene hardware biométrico", Toast.LENGTH_SHORT
                ).show()

                BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE -> Toast.makeText(
                    context, "Hardware biométrico no disponible", Toast.LENGTH_SHORT
                ).show()

                BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED -> Toast.makeText(
                    context, "No se ha registrado ninguna huella dactilar", Toast.LENGTH_SHORT
                ).show()

                else -> Toast.makeText(context, "Error desconocido", Toast.LENGTH_SHORT).show()
            }
        } else {
            Toast.makeText(
                context,
                "Este dispositivo no soporta autenticación biométrica moderna.",
                Toast.LENGTH_SHORT
            ).show()
        }
    }
}
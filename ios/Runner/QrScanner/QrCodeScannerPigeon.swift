//
//  QrCodeScannerPigeon.swift
//  Runner
//
//  Created by Jonatan Padilla on 23/02/25.
//

// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


private func wrapResult(_ result: Any?) -> [Any?] {
    return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
    if let pigeonError = error as? PigeonError {
        return [
            pigeonError.code,
            pigeonError.message,
            pigeonError.details,
        ]
    }
    if let flutterError = error as? FlutterError {
        return [
            flutterError.code,
            flutterError.message,
            flutterError.details,
        ]
    }
    return [
        "\(error)",
        "\(type(of: error))",
        "Stacktrace: \(Thread.callStackSymbols)",
    ]
}

private func isNullish(_ value: Any?) -> Bool {
    return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
    if value is NSNull { return nil }
    return value as! T?
}

private class OutSwiftPigeonCodecReader: FlutterStandardReader {
}

private class OutSwiftPigeonCodecWriter: FlutterStandardWriter {
}

private class OutSwiftPigeonCodecReaderWriter: FlutterStandardReaderWriter {
    override func reader(with data: Data) -> FlutterStandardReader {
        return OutSwiftPigeonCodecReader(data: data)
    }
    
    override func writer(with data: NSMutableData) -> FlutterStandardWriter {
        return OutSwiftPigeonCodecWriter(data: data)
    }
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol QrScannerNativeApi {
    func scanQrCode(completion: @escaping (Result<String?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class QrScannerNativeApiSetup {
    static var codec: FlutterStandardMessageCodec { OutSwiftPigeonCodec.shared }
    /// Sets up an instance of `QrScannerNativeApi` to handle messages through the `binaryMessenger`.
    static func setUp(binaryMessenger: FlutterBinaryMessenger, api: QrScannerNativeApi?, messageChannelSuffix: String = "") {
        let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
        let scanQrCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.qr_code_manager.QrScannerNativeApi.scanQrCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
        if let api = api {
            scanQrCodeChannel.setMessageHandler { _, reply in
                api.scanQrCode { result in
                    switch result {
                    case .success(let res):
                        reply(wrapResult(res))
                    case .failure(let error):
                        reply(wrapError(error))
                    }
                }
            }
        } else {
            scanQrCodeChannel.setMessageHandler(nil)
        }
    }
}
